---
title: "Mapping with ggplot"
author: "Meddy Rutayisire"
format: 
   html:
     self-contained: true
     toc: true
message: false
---

To view and code and materials for this class click [HERE](https://github.com/rutayisire24/R-Classes/tree/main/Mapping)

# Introduction to Mapping in R

## Overview

*Class was inspired by works by Mel Moreno and Mathieu Basile found [Here](https://r-spatial.org/r/2018/10/25/ggplot2-sf.html)*

Welcome to the "Introduction to Mapping in R" class! This course is designed to provide you with the foundational skills needed to create and visualize geographic data using R.

R is a powerful statistical programming language that offers extensive libraries and tools for working with spatial data, making it an excellent choice for mapping and geographic information system (GIS) applications.

## Objectives

By the end of this course, you will be able to: - Understand the basics of spatial data and geographic coordinate systems.

Import and manipulate spatial data in R. Create a variety of maps using popular R packages. Customize maps to highlight specific data insights.

## Getting Started

```{r}
pacman::p_load(
 tidyverse,sf , rnaturalearth, here
)
```

### Set Theme

```{r}
theme_set(theme_bw())
```

The package rnaturalearth provides a map of countries of the entire world. Use ne_countries to pull country data and choose the scale
(rnaturalearthhires is necessary for scale = "large"). The function can return sp classes (default) or directly sf classes, as defined in the argument returnclass:

```{r}
world_df <- ne_countries(scale = "medium", returnclass = "sf")

class(world_df)
sample(names(world_df),10)
```

### Data and basic plot (ggplot and geom_sf)

```{r}
ggplot(data = world_df) +
    geom_sf()
```

### Add labels

```{r}
ggplot(data = world_df) +
    geom_sf() +
  theme_void()
```

### Add Color

```{r}
ggplot(data = world_df) + 
    geom_sf(color = "red", fill = "lightblue")
```

Filling colors based on a variable

```{r}
ggplot(data = world_df) +
    geom_sf(aes(fill = pop_est))
```

### Customising to a color palette - Viridis

```{r}
ggplot(data = world_df) +
    geom_sf(aes(fill = pop_est)) +
    scale_fill_viridis_c(option = "plasma", trans = "sqrt")
```

### Customising to a color palette - Colorbrewer

```{r}
ggplot(data = world_df) +
    geom_sf(aes(fill = pop_est)) +
    scale_fill_distiller(palette = 4)
```

### Filtering to Africa

```{r}
world_df |> 
  filter(continent == "Africa") |> 
  ggplot() +
  geom_sf(aes(fill = pop_est)) +
  scale_fill_viridis_c(name = "Population (millions)", 
                       breaks = c(1e6, 10e6, 20e6, 50e6, 100e6, 200e6),
                       labels = c("1M", "10M", "20M", "50M", "100M", "200M"),
                       option = "viridis") +
  labs(title = "Map of Africa Showing Distribution of Populations") +
  theme_void() +
  theme(legend.position = "bottom")

```

### Explore several filters Views and Facetting

```{r}
world_df |> 
  filter(continent %in% c("Africa", "Europe")) |> 
  ggplot() +
  geom_sf()
```

```{r}
world_df |> 
  filter(admin == "Uganda") |> 
  ggplot()+
  geom_sf()
```

## Ugandas Case Study

Load data

```{r}
uganda_sp <- st_read(here("Shape Files/Districts and Cities/uganda_districts_2019-wgs84.shp"))
```

Plot basic Map

```{r}
ggplot(data = uganda_sp)+
  geom_sf()
```

Add water bodies

```{r}
water_sp <- st_read(here("Shape Files/Water Bodies/UGA_water_areas_dcw.shp"))
                    

 ggplot(data = uganda_sp)+
   geom_sf()+
   geom_sf(data = water_sp)
```

Color the Water Bodies and Basic Styling

```{r}
ggplot(data = uganda_sp)+
  geom_sf()+
  geom_sf(data = water_sp,fill = "lightblue")+
  theme_void()+
  labs(title = "Map of the Uganda", caption =  "DataSource: Open_Data_Uganda")
```

### Merge Data to Maps
